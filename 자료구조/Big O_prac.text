# 시간복잡도(Big O) 예제 문제
- 출처 : https://dingrr.com/blog/post/알고리즘-시간복잡도-예제-15종

1. 
```
int a = 0, b = 0;

for (i = 1; i < N; i++) {
    a = a + rand();
}

for (j = 2; j < M; j++) {
    b = b + rand();
}
```
`O(N + M)`

2. 
```
a = 0, b = 0;    
for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
        a = a + j;
    }
}
for (k = 0; k < N; k++) {
    b = b + k;
} 
```
`O(N^2)`

3. 
```
int a = 0;
for (i = 0; i < N; i++) {
    for (j = N; j > i; j--) {
        a = a + i + j;
    }
}
```
N-0 N-1 N-2 ... 1

`O(N^2)`

문제 #4. 우리는 두가지 알고리즘을 가지고 있습니다, 'Algo A'와 'Algo B' 이지요. 

여기서, 'Algo A'가 'Algo B' 보다 점근적으로 더 효과적이라는 말은 무슨 뜻인지 아래 선택 답지에서 골라보세요.

1. Algo A가 어떤 크기의 입력이 들어와도 항상 빠르다.
2. Algo A가 입력 크기가 클 경우 빠르다.
3. Algo A가 입력 크기가 작을 경우 빠르다.
4. Algo B가 항상 더 빠르다.
5. Algo A가 입력 크기에 따라 메모리 관리능력이 효과적이다.
   
`2번. 입력크기가 클 경우 빠르다 = 점근적으로 효과적이다.`

4.
```
int a = 0, i = N;
while (i > 0) {
    a += i;
    i /= 2;
}
```
N, N/2, (N/2/)2 .... 

`O(log`<small><small>`n`</small></small>`)`

5.
```
int count = 0;
for (int i = N; i > 0; i /= 2) {
    for (int j = 0; j < i; j++) {
        count += 1;
    }
}
```
`O(N)`

처음 반복문에서 적게 반복하는 만큼 두번째 반복문에서 반복 따라서 빅오는 N

